{
  "version": 3,
  "sources": ["../../svelte-gestures/dist/index.esm.js"],
  "sourcesContent": ["const DEFAULT_DELAY = 300; // ms\nconst DEFAULT_PRESS_SPREAD = 4; // px\nconst DEFAULT_MIN_SWIPE_DISTANCE = 60; // px\nconst DEFAULT_TOUCH_ACTION = 'none';\n\n// export type PointerType = 'mouse' | 'touch' | 'pen' | 'all';\n\nfunction addEventListener(node, event, handler) {\n  node.addEventListener(event, handler);\n  return () => node.removeEventListener(event, handler);\n}\nfunction getCenterOfTwoPoints(node, activeEvents) {\n  const rect = node.getBoundingClientRect();\n  const xDistance = Math.abs(activeEvents[0].clientX - activeEvents[1].clientX);\n  const yDistance = Math.abs(activeEvents[0].clientY - activeEvents[1].clientY);\n  const minX = Math.min(activeEvents[0].clientX, activeEvents[1].clientX);\n  const minY = Math.min(activeEvents[0].clientY, activeEvents[1].clientY);\n  const centerX = minX + xDistance / 2;\n  const centerY = minY + yDistance / 2;\n  const x = Math.round(centerX - rect.left);\n  const y = Math.round(centerY - rect.top);\n  return {\n    x,\n    y\n  };\n}\nfunction removeEvent(event, activeEvents) {\n  return activeEvents.filter(activeEvent => {\n    return event.pointerId !== activeEvent.pointerId;\n  });\n}\nfunction dispatch(node, gestureName, event, activeEvents, actionType) {\n  node.dispatchEvent(new CustomEvent(`${gestureName}${actionType}`, {\n    detail: {\n      event,\n      pointersCount: activeEvents.length,\n      target: event.target\n    }\n  }));\n}\nfunction setPointerControls(gestureName, node, onMoveCallback, onDownCallback, onUpCallback, touchAction = DEFAULT_TOUCH_ACTION) {\n  node.style.touchAction = touchAction;\n  let activeEvents = [];\n  function handlePointerdown(event) {\n    activeEvents.push(event);\n    dispatch(node, gestureName, event, activeEvents, 'down');\n    onDownCallback?.(activeEvents, event);\n    const pointerId = event.pointerId;\n    function onup(e) {\n      if (pointerId === e.pointerId) {\n        activeEvents = removeEvent(e, activeEvents);\n        if (!activeEvents.length) {\n          removeEventHandlers();\n        }\n        dispatch(node, gestureName, e, activeEvents, 'up');\n        onUpCallback?.(activeEvents, e);\n      }\n    }\n    function removeEventHandlers() {\n      removePointermoveHandler();\n      removeLostpointercaptureHandler();\n      removepointerupHandler();\n      removepointerleaveHandler();\n    }\n    const removePointermoveHandler = addEventListener(node, 'pointermove', e => {\n      activeEvents = activeEvents.map(activeEvent => {\n        return e.pointerId === activeEvent.pointerId ? e : activeEvent;\n      });\n      dispatch(node, gestureName, e, activeEvents, 'move');\n      onMoveCallback?.(activeEvents, e);\n    });\n    const removeLostpointercaptureHandler = addEventListener(node, 'lostpointercapture', e => {\n      onup(e);\n    });\n    const removepointerupHandler = addEventListener(node, 'pointerup', e => {\n      onup(e);\n    });\n    const removepointerleaveHandler = addEventListener(node, 'pointerleave', e => {\n      activeEvents = [];\n      removeEventHandlers();\n      dispatch(node, gestureName, e, activeEvents, 'up');\n      onUpCallback?.(activeEvents, e);\n    });\n  }\n  const removePointerdownHandler = addEventListener(node, 'pointerdown', handlePointerdown);\n  return {\n    destroy: () => {\n      removePointerdownHandler();\n    }\n  };\n}\n\nfunction pan(node, inputParameters) {\n  let parameters = {\n    delay: DEFAULT_DELAY,\n    composed: false,\n    touchAction: DEFAULT_TOUCH_ACTION,\n    ...inputParameters\n  };\n  const gestureName = 'pan';\n  let startTime;\n  let target;\n  function onDown(activeEvents, event) {\n    startTime = Date.now();\n    target = event.target;\n  }\n  function onMove(activeEvents, event) {\n    if (activeEvents.length === 1 && Date.now() - startTime > parameters.delay) {\n      const rect = node.getBoundingClientRect();\n      const x = Math.round(event.clientX - rect.left);\n      const y = Math.round(event.clientY - rect.top);\n      if (x >= 0 && y >= 0 && x <= rect.width && y <= rect.height) {\n        node.dispatchEvent(new CustomEvent(gestureName, {\n          detail: {\n            x,\n            y,\n            target\n          }\n        }));\n      }\n    }\n    return false;\n  }\n  if (parameters.composed) {\n    return {\n      onMove,\n      onDown,\n      onUp: null\n    };\n  }\n  return {\n    ...setPointerControls(gestureName, node, onMove, onDown, null, parameters.touchAction),\n    update: updateParameters => {\n      parameters = {\n        ...parameters,\n        ...updateParameters\n      };\n    }\n  };\n}\n\nfunction getPointersDistance(activeEvents) {\n  return Math.hypot(activeEvents[0].clientX - activeEvents[1].clientX, activeEvents[0].clientY - activeEvents[1].clientY);\n}\nfunction pinch(node, inputParameters) {\n  const parameters = {\n    touchAction: DEFAULT_TOUCH_ACTION,\n    composed: false,\n    ...inputParameters\n  };\n  const gestureName = 'pinch';\n  let prevDistance;\n  let initDistance = 0;\n  let pinchCenter;\n  function onUp(activeEvents, event) {\n    if (activeEvents.length === 1) {\n      prevDistance = undefined;\n    }\n  }\n  function onDown(activeEvents, event) {\n    if (activeEvents.length === 2) {\n      initDistance = getPointersDistance(activeEvents);\n      pinchCenter = getCenterOfTwoPoints(node, activeEvents);\n    }\n  }\n  function onMove(activeEvents, event) {\n    if (activeEvents.length === 2) {\n      const curDistance = getPointersDistance(activeEvents);\n      if (prevDistance !== undefined && curDistance !== prevDistance) {\n        const scale = curDistance / initDistance;\n        node.dispatchEvent(new CustomEvent(gestureName, {\n          detail: {\n            scale,\n            center: pinchCenter\n          }\n        }));\n      }\n      prevDistance = curDistance;\n    }\n    return false;\n  }\n  if (parameters.composed) {\n    return {\n      onMove,\n      onDown,\n      onUp: null\n    };\n  }\n  return setPointerControls(gestureName, node, onMove, onDown, onUp, parameters.touchAction);\n}\n\nfunction press(node, inputParameters) {\n  const parameters = {\n    composed: false,\n    timeframe: DEFAULT_DELAY,\n    triggerBeforeFinished: false,\n    spread: DEFAULT_PRESS_SPREAD,\n    touchAction: 'auto',\n    ...inputParameters\n  };\n  node.style.userSelect = 'none';\n  node.oncontextmenu = e => {\n    e.preventDefault();\n  };\n  const gestureName = 'press';\n  let startTime;\n  let clientX;\n  let clientY;\n  const clientMoved = {\n    x: 0,\n    y: 0\n  };\n  let timeout;\n  let triggeredOnTimeout = false;\n  let triggered = false;\n  function onDone(eventX, eventY, event) {\n    if (Math.abs(eventX - clientX) < parameters.spread && Math.abs(eventY - clientY) < parameters.spread && Date.now() - startTime > parameters.timeframe) {\n      const rect = node.getBoundingClientRect();\n      const x = Math.round(eventX - rect.left);\n      const y = Math.round(eventY - rect.top);\n      triggered = true;\n      node.dispatchEvent(new CustomEvent(gestureName, {\n        detail: {\n          x,\n          y,\n          target: event.target,\n          pointerType: event.pointerType\n        }\n      }));\n    }\n  }\n  function onUp(activeEvents, event) {\n    clearTimeout(timeout);\n    if (!triggeredOnTimeout) {\n      onDone(event.clientX, event.clientY, event);\n    }\n  }\n  function onMove(activeEvents, event) {\n    clientMoved.x = event.clientX;\n    clientMoved.y = event.clientY;\n    return triggered;\n  }\n  function onDown(activeEvents, event) {\n    triggered = false;\n    clientX = event.clientX;\n    clientY = event.clientY;\n    startTime = Date.now();\n    triggeredOnTimeout = false;\n    clientMoved.x = event.clientX;\n    clientMoved.y = event.clientY;\n    if (parameters.triggerBeforeFinished) {\n      timeout = setTimeout(() => {\n        triggeredOnTimeout = true;\n        onDone(clientMoved.x, clientMoved.y, event);\n      }, parameters.timeframe + 1);\n    }\n  }\n  const onSharedDestroy = setPointerControls(gestureName, node, onMove, onDown, onUp, parameters.touchAction);\n  if (parameters.composed) {\n    return {\n      onMove,\n      onDown,\n      onUp\n    };\n  }\n  return {\n    destroy: () => {\n      onSharedDestroy.destroy();\n      clearTimeout(timeout);\n    }\n  };\n}\n\nfunction getPointersAngleDeg(activeEvents) {\n  const quadrantsMap = {\n    left: {\n      top: 360,\n      bottom: 180\n    },\n    right: {\n      top: 0,\n      bottom: 180\n    }\n  };\n  const width = activeEvents[1].clientX - activeEvents[0].clientX;\n  const height = activeEvents[0].clientY - activeEvents[1].clientY;\n\n  /*\n  In quadrants 1 and 3 allworks as expected. \n  In quadrants 2 and 4, either height or width is negative,\n  so we get negative angle. It is even the other of the two angles.\n  As sum in triangle is 180 deg, we can simply sum the negative angle with 90 deg\n  and get the right angle's positive value. Then add 90 for each quadrant above 1st.\n  This way we dont need to code our own arc cotangent fn (it does not exist in JS)\n  */\n\n  const angle = Math.atan(width / height) / (Math.PI / 180);\n  const halfQuadrant = width > 0 ? quadrantsMap.right : quadrantsMap.left;\n  const quadrantAngleBonus = height > 0 ? halfQuadrant.top : halfQuadrant.bottom;\n  return angle + quadrantAngleBonus;\n}\nfunction rotate(node, inputParameters) {\n  const parameters = {\n    touchAction: DEFAULT_TOUCH_ACTION,\n    composed: false,\n    ...inputParameters\n  };\n  const gestureName = 'rotate';\n  let prevAngle;\n  let initAngle = 0;\n  let rotationCenter;\n  function onUp(activeEvents, event) {\n    if (activeEvents.length === 1) {\n      prevAngle = undefined;\n    }\n  }\n  function onDown(activeEvents, event) {\n    if (activeEvents.length === 2) {\n      activeEvents = activeEvents.sort((a, b) => {\n        return a.clientX - b.clientX;\n      });\n      rotationCenter = getCenterOfTwoPoints(node, activeEvents);\n      initAngle = getPointersAngleDeg(activeEvents);\n    }\n  }\n  function onMove(activeEvents, event) {\n    if (activeEvents.length === 2) {\n      const curAngle = getPointersAngleDeg(activeEvents);\n      if (prevAngle !== undefined && curAngle !== prevAngle) {\n        // Make sure we start at zero, doesnt matter what is the initial angle of fingers\n        let rotation = curAngle - initAngle;\n\n        // instead of showing 180 - 360, we will show negative -180 - 0\n        if (rotation > 180) {\n          rotation -= 360;\n        }\n        node.dispatchEvent(new CustomEvent(gestureName, {\n          detail: {\n            rotation,\n            center: rotationCenter\n          }\n        }));\n      }\n      prevAngle = curAngle;\n    }\n    return false;\n  }\n  if (parameters.composed) {\n    return {\n      onMove,\n      onDown,\n      onUp\n    };\n  }\n  return setPointerControls(gestureName, node, onMove, onDown, onUp, parameters.touchAction);\n}\n\nfunction swipe(node, inputParameters) {\n  const parameters = {\n    timeframe: DEFAULT_DELAY,\n    minSwipeDistance: DEFAULT_MIN_SWIPE_DISTANCE,\n    touchAction: DEFAULT_TOUCH_ACTION,\n    composed: false,\n    ...inputParameters\n  };\n  const gestureName = 'swipe';\n  let startTime;\n  let clientX;\n  let clientY;\n  let target;\n  function onDown(activeEvents, event) {\n    clientX = event.clientX;\n    clientY = event.clientY;\n    startTime = Date.now();\n    if (activeEvents.length === 1) {\n      target = event.target;\n    }\n  }\n  function onUp(activeEvents, event) {\n    if (event.type === 'pointerup' && activeEvents.length === 0 && Date.now() - startTime < parameters.timeframe) {\n      const x = event.clientX - clientX;\n      const y = event.clientY - clientY;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n      let direction = null;\n      if (absX >= 2 * absY && absX > parameters.minSwipeDistance) {\n        // horizontal (by *2 we eliminate diagonal movements)\n        direction = x > 0 ? 'right' : 'left';\n      } else if (absY >= 2 * absX && absY > parameters.minSwipeDistance) {\n        // vertical (by *2 we eliminate diagonal movements)\n        direction = y > 0 ? 'bottom' : 'top';\n      }\n      if (direction) {\n        node.dispatchEvent(new CustomEvent(gestureName, {\n          detail: {\n            direction,\n            target\n          }\n        }));\n      }\n    }\n  }\n  if (parameters.composed) {\n    return {\n      onMove: null,\n      onDown,\n      onUp\n    };\n  }\n  return setPointerControls(gestureName, node, null, onDown, onUp, parameters.touchAction);\n}\n\nfunction callAllByType(ListenerType, subGestureFunctions, activeEvents, event) {\n  subGestureFunctions.forEach(gesture => {\n    gesture[ListenerType]?.(activeEvents, event);\n  });\n}\nfunction composedGesture(node, gestureCallback) {\n  const gestureFunctions = [];\n  function registerGesture(gestureFn, parameters) {\n    const subGestureFns = gestureFn(node, {\n      ...parameters,\n      composed: true\n    });\n    gestureFunctions.push(subGestureFns);\n    return subGestureFns;\n  }\n  const onMoveCallback = gestureCallback(registerGesture);\n  const gestureName = 'composedGesture';\n  function onUp(activeEvents, event) {\n    callAllByType('onUp', gestureFunctions, activeEvents, event);\n  }\n  function onDown(activeEvents, event) {\n    callAllByType('onDown', gestureFunctions, activeEvents, event);\n  }\n  function onMove(activeEvents, event) {\n    onMoveCallback(activeEvents, event);\n    return true;\n  }\n  return setPointerControls(gestureName, node, onMove, onDown, onUp);\n}\n\nconst DEFAULT_TRESHOLD = 0.9;\nconst DEFAULT_NB_OF_SAMPLE_POINTS = 64;\nconst PHI = (Math.sqrt(5.0) - 1) / 2;\nconst ANGLE_RANGE_RAD = deg2Rad(45.0);\nconst ANGLE_PRECISION_RAD = deg2Rad(2.0);\nfunction deg2Rad(d) {\n  return d * Math.PI / 180;\n}\nfunction getDistance(a, b) {\n  const dx = b.x - a.x;\n  const dy = b.y - a.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\nfunction distanceAtBestAngle(pattern, points, center) {\n  let fromAngleRad = -ANGLE_RANGE_RAD;\n  let toAngleRad = ANGLE_RANGE_RAD;\n  let angleOne = PHI * fromAngleRad + (1.0 - PHI) * toAngleRad;\n  let distanceOne = distanceAtAngle(pattern, angleOne, points, center);\n  let angleTwo = (1.0 - PHI) * fromAngleRad + PHI * toAngleRad;\n  let distanceTwo = distanceAtAngle(pattern, angleTwo, points, center);\n  while (Math.abs(toAngleRad - fromAngleRad) > ANGLE_PRECISION_RAD) {\n    if (distanceOne < distanceTwo) {\n      toAngleRad = angleTwo;\n      angleTwo = angleOne;\n      distanceTwo = distanceOne;\n      angleOne = PHI * fromAngleRad + (1.0 - PHI) * toAngleRad;\n      distanceOne = distanceAtAngle(pattern, angleOne, points, center);\n    } else {\n      fromAngleRad = angleOne;\n      angleOne = angleTwo;\n      distanceOne = distanceTwo;\n      angleTwo = (1.0 - PHI) * fromAngleRad + PHI * toAngleRad;\n      distanceTwo = distanceAtAngle(pattern, angleTwo, points, center);\n    }\n  }\n  return Math.min(distanceOne, distanceTwo);\n}\nfunction distanceAtAngle(pattern, angle, points, center) {\n  const strokePoints = rotateBy(angle, points, center);\n  const d = strokePoints.reduce((accu, sPoint, i) => {\n    return accu += getDistance(sPoint, pattern.points[i]);\n  }, 0);\n  return d / strokePoints.length;\n}\nfunction rotateBy(angle, points, center) {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return points.map(point => {\n    return {\n      x: (point.x - center.x) * cos - (point.y - center.y) * sin + center.x,\n      y: (point.x - center.x) * sin + (point.y - center.y) * cos + center.y\n    };\n  });\n}\nfunction shapeDetector(inputPatterns, options = {}) {\n  const threshold = options.threshold || 0;\n  const NUMBER_OF_SAMPLE_POINTS = options.nbOfSamplePoints || DEFAULT_NB_OF_SAMPLE_POINTS;\n  const SQUARE_SIZE = 250;\n  const HALF_SQUARE_DIAGONAL = Math.sqrt(SQUARE_SIZE ** 2 + SQUARE_SIZE ** 2) / 2;\n  const patterns = inputPatterns.flatMap(pattern => learn(pattern.name, pattern.points, pattern.allowRotation ?? false, pattern.bothDirections ?? true));\n  function getStroke(points, name, allowRotation) {\n    points = resample();\n    const center = getCenterPoint();\n    if (allowRotation) {\n      points = rotateBy(-indicativeAngle(center), points, center);\n    }\n    points = scaleToSquare();\n    points = translateToOrigin(getCenterPoint());\n    return {\n      name,\n      points,\n      center: {\n        x: 0,\n        y: 0\n      },\n      allowRotation\n    };\n    function resample() {\n      let localDistance, q;\n      let distance = 0;\n      const interval = strokeLength() / (NUMBER_OF_SAMPLE_POINTS - 1);\n      const newPoints = [points[0]];\n      for (let i = 1; i < points.length; i++) {\n        localDistance = getDistance(points[i - 1], points[i]);\n        if (distance + localDistance >= interval) {\n          q = {\n            x: points[i - 1].x + (interval - distance) / localDistance * (points[i].x - points[i - 1].x),\n            y: points[i - 1].y + (interval - distance) / localDistance * (points[i].y - points[i - 1].y)\n          };\n          newPoints.push(q);\n          points.splice(i, 0, q);\n          distance = 0;\n        } else {\n          distance += localDistance;\n        }\n      }\n      if (newPoints.length === NUMBER_OF_SAMPLE_POINTS - 1) {\n        newPoints.push(points[points.length - 1]);\n      }\n      return newPoints;\n    }\n    function scaleToSquare() {\n      const box = {\n        minX: +Infinity,\n        maxX: -Infinity,\n        minY: +Infinity,\n        maxY: -Infinity,\n        width: 0,\n        height: 0\n      };\n      points.forEach(point => {\n        box.minX = Math.min(box.minX, point.x);\n        box.minY = Math.min(box.minY, point.y);\n        box.maxX = Math.max(box.maxX, point.x);\n        box.maxY = Math.max(box.maxY, point.y);\n      });\n      box.width = box.maxX - box.minX;\n      box.height = box.maxY - box.minY;\n      return points.map(point => {\n        return {\n          x: point.x * (SQUARE_SIZE / box.width),\n          y: point.y * (SQUARE_SIZE / box.height)\n        };\n      });\n    }\n    function translateToOrigin(center) {\n      return points.map(point => ({\n        x: point.x - center.x,\n        y: point.y - center.y\n      }));\n    }\n    function getCenterPoint() {\n      const centre = points.reduce((acc, point) => {\n        acc.x += point.x;\n        acc.y += point.y;\n        return acc;\n      }, {\n        x: 0,\n        y: 0\n      });\n      centre.x /= points.length;\n      centre.y /= points.length;\n      return centre;\n    }\n    function indicativeAngle(center) {\n      return Math.atan2(center.y - points[0].y, center.x - points[0].x);\n    }\n    function strokeLength() {\n      let d = 0;\n      for (let i = 1; i < points.length; i++) {\n        d += getDistance(points[i - 1], points[i]);\n      }\n      return d;\n    }\n  }\n  function detect(points, patternName = '') {\n    const strokeRotated = getStroke(points, patternName, true);\n    const strokeUnrotated = getStroke(points, patternName, false);\n    let bestDistance = +Infinity;\n    let bestPattern = null;\n    let bestScore = 0;\n    patterns.forEach(pattern => {\n      if (pattern.name.indexOf(patternName) > -1) {\n        const distance = pattern.allowRotation ? distanceAtBestAngle(pattern, strokeRotated.points, strokeRotated.center) : distanceAtAngle(pattern, 0, strokeUnrotated.points, strokeUnrotated.center);\n        const score = 1.0 - distance / HALF_SQUARE_DIAGONAL;\n        if (distance < bestDistance && score > threshold) {\n          bestDistance = distance;\n          bestPattern = pattern.name;\n          bestScore = score;\n        }\n      }\n    });\n    return {\n      pattern: bestPattern,\n      score: bestScore\n    };\n  }\n  function learn(name, points, allowRotation, bothDirections) {\n    const response = [getStroke([...points], name, allowRotation)];\n    if (bothDirections) {\n      response.push(getStroke([...points.reverse()], name, allowRotation));\n    }\n    return response;\n  }\n  return {\n    detect\n  };\n}\n\nfunction shapeGesture(node, inputParameters) {\n  let parameters = {\n    composed: false,\n    shapes: [],\n    threshold: DEFAULT_TRESHOLD,\n    timeframe: 1000,\n    nbOfSamplePoints: DEFAULT_NB_OF_SAMPLE_POINTS,\n    touchAction: DEFAULT_TOUCH_ACTION,\n    ...inputParameters\n  };\n  const gestureName = 'shapeGesture';\n  const detector = shapeDetector(parameters.shapes, {\n    ...parameters\n  });\n  let startTime;\n  let target;\n  let stroke = [];\n  function onDown(activeEvents, event) {\n    startTime = Date.now();\n    target = event.target;\n    stroke = [];\n  }\n  function onMove(activeEvents, event) {\n    if (activeEvents.length === 1) {\n      const rect = node.getBoundingClientRect();\n      const x = Math.round(event.clientX - rect.left);\n      const y = Math.round(event.clientY - rect.top);\n      stroke.push({\n        x,\n        y\n      });\n    }\n    return false;\n  }\n  function onUp(activeEvents, event) {\n    if (stroke.length > 2 && Date.now() - startTime < parameters.timeframe) {\n      const detectionResult = detector.detect(stroke);\n      node.dispatchEvent(new CustomEvent(gestureName, {\n        detail: {\n          ...detectionResult,\n          target\n        }\n      }));\n    }\n  }\n  if (parameters.composed) {\n    return {\n      onMove,\n      onDown,\n      onUp\n    };\n  }\n  return {\n    ...setPointerControls(gestureName, node, onMove, onDown, onUp, parameters.touchAction),\n    update: updateParameters => {\n      parameters = {\n        ...parameters,\n        ...updateParameters\n      };\n    }\n  };\n}\n\nfunction isScrollMode(event) {\n  return event.pointerType === 'touch';\n}\nfunction getScrollParent(node, direction) {\n  if (!node) {\n    return undefined;\n  }\n  const isElement = node instanceof HTMLElement;\n  const overflowY = isElement && window.getComputedStyle(node).overflowY;\n  const isScrollable = overflowY !== 'visible' && overflowY !== 'hidden';\n  const directionToDimension = {\n    x: 'Width',\n    y: 'Height'\n  };\n  if (isScrollable && node[`scroll${directionToDimension[direction]}`] > node[`client${directionToDimension[direction]}`]) {\n    return node;\n  } else {\n    return getScrollParent(node.parentNode, direction) || document.scrollingElement || document.body;\n  }\n}\nfunction scroll(node, inputParameters) {\n  let parameters = {\n    ...{\n      delay: DEFAULT_DELAY,\n      touchAction: DEFAULT_TOUCH_ACTION,\n      composed: false\n    },\n    ...inputParameters\n  };\n  const gestureName = 'scroll';\n  const nearestScrollEl = {\n    x: undefined,\n    y: undefined\n  };\n  let prevCoords;\n  const scrollDelta = {\n    x: 0,\n    y: 0\n  };\n  const scrollDirectionPositive = {\n    x: true,\n    y: true\n  };\n  function scrollElementTo(el, scrollValue, direction) {\n    el?.scrollBy({\n      [direction === 'x' ? 'left' : 'top']: scrollValue,\n      behavior: 'auto'\n    });\n  }\n  function onDown(activeEvents, event) {\n    nearestScrollEl.y = getScrollParent(node, 'y');\n    nearestScrollEl.x = getScrollParent(node, 'x');\n    prevCoords = undefined;\n  }\n  function onMove(activeEvents, event) {\n    if (activeEvents.length === 1 && isScrollMode(event)) {\n      if (prevCoords !== undefined) {\n        scrollDelta.y = Math.round(prevCoords.y - event.clientY);\n        scrollDelta.x = Math.round(prevCoords.x - event.clientX);\n        nearestScrollEl.y && scrollElementTo(nearestScrollEl.y, scrollDelta.y, 'y');\n        nearestScrollEl.x && scrollElementTo(nearestScrollEl.x, scrollDelta.x, 'x');\n      }\n      prevCoords = {\n        x: event.clientX,\n        y: event.clientY\n      };\n    }\n    return false;\n  }\n  function onUp(activeEvents, event) {\n    if (isScrollMode(event)) {\n      if (scrollDelta.y || scrollDelta.x) {\n        scrollDirectionPositive.y = scrollDelta.y > 0;\n        scrollDirectionPositive.x = scrollDelta.x > 0;\n        requestAnimationFrame(scrollOutLoop);\n      }\n    }\n  }\n  function scrollOutByDirection(direction) {\n    if (!scrollDirectionPositive[direction] && scrollDelta[direction] < 0) {\n      scrollDelta[direction] += 0.3;\n    } else if (scrollDirectionPositive[direction] && scrollDelta[direction] > 0) {\n      scrollDelta[direction] -= 0.3;\n    } else {\n      scrollDelta[direction] = 0;\n    }\n    if (scrollDelta[direction]) {\n      scrollElementTo(nearestScrollEl[direction], scrollDelta[direction], direction);\n      requestAnimationFrame(scrollOutLoop);\n    }\n  }\n  function scrollOutLoop() {\n    nearestScrollEl.x && scrollOutByDirection('x');\n    nearestScrollEl.y && scrollOutByDirection('y');\n  }\n  if (parameters.composed) {\n    return {\n      onMove,\n      onUp,\n      onDown\n    };\n  }\n  return {\n    ...setPointerControls(gestureName, node, onMove, onDown, onUp, parameters.touchAction),\n    update: updateParameters => {\n      parameters = {\n        ...parameters,\n        ...updateParameters\n      };\n    }\n  };\n}\n\nfunction tap(node, inputParameters) {\n  const parameters = {\n    timeframe: DEFAULT_DELAY,\n    composed: false,\n    touchAction: 'auto',\n    ...inputParameters\n  };\n  const gestureName = 'tap';\n  let startTime;\n  let clientX;\n  let clientY;\n  function onUp(activeEvents, event) {\n    if (Math.abs(event.clientX - clientX) < 4 && Math.abs(event.clientY - clientY) < 4 && Date.now() - startTime < parameters.timeframe) {\n      const rect = node.getBoundingClientRect();\n      const x = Math.round(event.clientX - rect.left);\n      const y = Math.round(event.clientY - rect.top);\n      node.dispatchEvent(new CustomEvent(gestureName, {\n        detail: {\n          x,\n          y,\n          target: event.target\n        }\n      }));\n    }\n  }\n  function onDown(activeEvents, event) {\n    clientX = event.clientX;\n    clientY = event.clientY;\n    startTime = Date.now();\n  }\n  if (parameters.composed) {\n    return {\n      onMove: null,\n      onDown,\n      onUp\n    };\n  }\n  return setPointerControls(gestureName, node, null, onDown, onUp, parameters.touchAction);\n}\n\nexport { DEFAULT_DELAY, DEFAULT_MIN_SWIPE_DISTANCE, DEFAULT_PRESS_SPREAD, DEFAULT_TOUCH_ACTION, composedGesture, getCenterOfTwoPoints, pan, pinch, press, rotate, scroll, setPointerControls, shapeGesture, swipe, tap };\n"],
  "mappings": "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",
  "names": ["center"]
}
